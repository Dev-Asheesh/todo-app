{"version":3,"sources":["componets/Todo.js","componets/todoadd.js","componets/TodoList.js","app.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isEditing","task","handleRemove","bind","toggleForm","handleUpdate","handleChange","this","removeTodo","id","setState","evt","preventDefault","updateTodo","target","name","value","onSubmit","type","onChange","onClick","Component","todoadd","handleSubmit","createTodo","uuid","htmlFor","placeholder","TodoList","todos","create","remove","update","newTodo","filter","t","updatedtask","updatedTodos","map","todo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2dbd1cb.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\n\r\nclass Todo extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={isEditing:false,task:this.props.task};\r\n        this.handleRemove=this.handleRemove.bind(this);\r\n        this.toggleForm=this.toggleForm.bind(this);\r\n        this.handleUpdate=this.handleUpdate.bind(this);\r\n        this.handleChange=this.handleChange.bind(this);\r\n    }\r\n        handleRemove(){\r\n            this.props.removeTodo(this.props.id)\r\n        }\r\n        toggleForm(){\r\n            this.setState({\r\n                isEditing:!this.state.isEditing\r\n            })\r\n        }\r\n        handleUpdate(evt){\r\n            evt.preventDefault();\r\n            this.props.updateTodo(this.props.id,this.state.task)\r\n            this.setState({isEditing:!this.state.isEditing})\r\n        }\r\n        handleChange(evt){\r\n            this.setState({\r\n                [evt.target.name]:evt.target.value\r\n            })\r\n        }\r\n    render(){\r\n        let result;\r\n        if(this.state.isEditing){\r\n            result=(\r\n                <div>\r\n                    <form onSubmit={this.handleUpdate}>\r\n                    <input type=\"text\" name=\"task\" value={this.state.task} onChange={this.handleChange}/>\r\n                    <button>save</button>\r\n                    </form>\r\n                </div>\r\n            )\r\n        }\r\n         else{\r\n            result=(<div>\r\n                <button onClick={this.toggleForm}>edit</button>\r\n                <button onClick={this.handleRemove}>X</button>\r\n                <li>{this.props.task}</li>\r\n            </div>)\r\n         }\r\n         return result;\r\n           \r\n        \r\n        \r\n    }\r\n}\r\nexport default Todo;","import React,{Component} from 'react';\r\nimport uuid from 'uuid';\r\nclass todoadd extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={task:\"\"};\r\n        this.handleChange=this.handleChange.bind(this);\r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n    \r\n    }\r\n    handleChange(evt){\r\n        this.setState({\r\n            [evt.target.name]:evt.target.value\r\n        })\r\n    }\r\n    handleSubmit(evt){\r\n        evt.preventDefault();\r\n        this.props.createTodo({...this.state,id:uuid()});\r\n        this.setState({\r\n            task:\"\"\r\n        })\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.handleSubmit}>\r\n                <label htmlFor=\"task\">New Todo</label>\r\n                <input type=\"text\" placeholder=\"new todo\" id=\"task\" value={this.state.task}\r\n                onChange={this.handleChange} name=\"task\"/>\r\n                <button>add item</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default todoadd;","import React,{Component} from 'react';\r\nimport Todo from \"./Todo\";\r\nimport Todoadd from \"./todoadd\";\r\nclass TodoList extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={todos:[]}\r\n        this.create=this.create.bind(this);\r\n        this.remove=this.remove.bind(this);\r\n        this.update=this.update.bind(this);\r\n    }\r\n    create(newTodo){\r\n        this.setState({\r\n            todos:[...this.state.todos,newTodo]\r\n        })\r\n    }\r\n    remove(id){\r\n        this.setState({\r\n            todos:this.state.todos.filter(t=>t.id!==id)\r\n        })\r\n    }\r\n    update(id,updatedtask){\r\n        const updatedTodos=this.state.todos.map(todo=>{\r\n            if(todo.id===id){\r\n                return{...todo,task:updatedtask}\r\n            }\r\n            return todo;\r\n        })\r\n        this.setState({\r\n            todos:updatedTodos\r\n        })\r\n    }\r\n    render(){\r\n        const todos=this.state.todos.map(todo=>{\r\n            return <Todo key={todo.id} id={todo.id} task={todo.task} removeTodo={this.remove} updateTodo={this.update} />\r\n        })\r\n        return(\r\n           \r\n\r\n            <div>\r\n                <h1>Hii Todo List</h1>\r\n                \r\n                <Todoadd createTodo={this.create}/>\r\n                <ul>{todos}</ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default TodoList;","import React,{Component} from 'react';\r\nimport TodoList from './componets/TodoList';\r\n\r\nclass App extends Component{\r\n    render(){\r\n        return(\r\n            <TodoList/>\r\n        );\r\n    }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}